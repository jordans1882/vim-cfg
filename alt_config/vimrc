" {{{ Document Header
" Filename: vimrc
" Purpose: Runtime and Plugins
" Description: This file has a control for whether or not to use plugins using the variable g:DefaultVim
" }}} Document Header
" {{{ My Default Vim

" {{{ Setup default paths
let $VIMPATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h') " TODO: understand this line...  I think it's the main vim path
let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim') " TODO: Find out what I cache here...
" }}} Setup default paths
" {{{ Utility Functions to source a file
function! s:source_file(path, ...) abort
	let use_global = get(a:000, 0, ! has('vim_starting'))
	let abspath = resolve(expand($VIMPATH.'/config/'.a:path))
	if ! use_global
		execute 'source' fnameescape(abspath)
		return
	endif

	let content = map(readfile(abspath),
		\ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
	let tempfile = tempname()
	try
		call writefile(content, tempfile)
		execute printf('source %s', fnameescape(tempfile))
	finally
		if filereadable(tempfile)
			call delete(tempfile)
		endif
	endtry
endfunction
" }}} Utility Functions to source a file
" {{{ Default sourcing
call s:source_file('general.vim')
call s:source_file('filetype.vim')
call s:source_file('mappings.vim')
call s:source_file('theme.vim')

" }}} Default sourcing

" Set augroup
" TODO: Comment why we're setting this
augroup MyAutoCmd
	autocmd!
	autocmd CursorHold *? syntax sync minlines=300
augroup END

 "Initialize base requirements
" (i.e. load init.vim or terminal.vim depending...)
if has('vim_starting')
	call s:source_file('init.vim')
	if ! has('nvim') && ! has('gui_running') && ! has('win32') && ! has('win64')
		" Linux terminal settings
		call s:source_file('terminal.vim')
	endif
endif

" }}} Default Vim (Things that don't get overridden by plugins?)
" {{{ Plugins (Using Vim Plug)
if !exists("g:DefaultVim")

" {{{ Set plug Variables?

" }}} Set Variables
" {{{ Plug utility functions

" }}} Plug utility functions
" {{{ Initialize Plug
call plug#begin('~/.vim/plugged')

  " Plugin outside ~/.vim/plugged with post-update hook
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'terryma/vim-multiple-cursors'
  Plug 'easymotion/vim-easymotion'
  Plug 'ervandew/supertab'
  " Plug 'ludovicchabant/vim-gutentags'
  Plug 'majutsushi/tagbar'
  Plug 'amiorin/vim-project'
  Plug 'MarcWeber/vim-addon-mw-utils'
  Plug 'liuchengxu/vim-which-key'
  Plug 'junegunn/fzf.vim'
  Plug 'junegunn/vim-slash'
  Plug 'Shougo/dein.vim'
  Plug 'Shougo/deol.nvim'
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'roxma/nvim-yarp'
  Plug 'w0rp/ale'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'thinca/vim-localrc'
  Plug 'junegunn/vim-peekaboo'
  Plug 'jpalardy/vim-slime'
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'manasthakur/vim-asyncmake'
  Plug 'vim-scripts/DeleteTrailingWhitespace'
  Plug 'scrooloose/nerdtree'
  Plug 'bronson/vim-visual-star-search'
  Plug 'itchyny/calendar.vim'
  Plug 'JamshedVesuna/vim-markdown-preview'
  Plug 'ddrscott/vim-window'
  Plug 'jalvesaq/nvim-r'
  Plug 'scrooloose/nerdcommenter'
  Plug 'mhinz/vim-startify'
  Plug 'Shougo/deoplete.nvim'
  Plug 'Shougo/denite.nvim'
  Plug 'kana/vim-operator-user'
  Plug 'rhysd/vim-operator-surround'
  Plug 'airblade/vim-gitgutter'


" Initialize plugin system
call plug#end()
" }}} Initialize Plug
" {{{ Source Plugin Configs
" call s:source_file('plugins/all.vim')
" call s:source_file('plugins/denite.vim')

" }}} Source Plugin Configs

" }}} Plugins (Using Plug)
" {{{ Post-plugin settings
" TODO: Modularize these settings into separate files
syntax on


autocmd VimEnter *
	\   if !argc()
	\ |   Startify
	\ |   NERDTree
	\ |   wincmd w
	\ | endif



" {{{ ale
	let g:ale_linters = {
				\   'c': ['gcc'],
				\   'cpp': ['gcc'],
				\   'html': ['tidy'],
				\   'lua': ['luacheck'],
				\   'r': ['lintr'],
				\   'rmd': ['lintr'],
				\   'rnoweb': ['lintr'],
				\   'rnw': ['lintr'],
				\   'tex': ['chktex'],
				\   'vim': ['vint']}
	let g:ale_sign_column_always = 1
	let g:ale_sign_error = '>>'
	let g:ale_sign_warning = '--'
	highlight clear ALEErrorSign
	highlight clear ALEWarningSign

	" Set this. Airline will handle the rest.
	let g:airline#extensions#ale#enabled = 1
	nmap <silent> <C-k> <Plug>(ale_previous_wrap)
	nmap <silent> <C-j> <Plug>(ale_next_wrap)
" }}} ale
" {{{ Calendar
	let g:calendar_google_calendar = 1
	let g:calendar_google_task = 1
" }}} Calendar
" {{{ Denite Options
	"nnoremap <silent><LocalLeader>r :<C-u>Denite -resume -refresh<CR>
	nnoremap <silent><LocalLeader>f :<C-u>Denite file/rec<CR>
	nnoremap <silent><LocalLeader>b :<C-u>Denite buffer file/old -default-action=switch<CR>
	nnoremap <silent><LocalLeader>d :<C-u>Denite directory_rec -default-action=cd<CR>
	nnoremap <silent><LocalLeader>v :<C-u>Denite register -buffer-name=register<CR>
	xnoremap <silent><LocalLeader>v :<C-u>Denite register -buffer-name=register -default-action=replace<CR>
	nnoremap <silent><LocalLeader>l :<C-u>Denite location_list -buffer-name=list<CR>
	nnoremap <silent><LocalLeader>q :<C-u>Denite quickfix -buffer-name=list<CR>
	nnoremap <silent><LocalLeader>n :<C-u>Denite dein<CR>
	nnoremap <silent><LocalLeader>g :<C-u>Denite grep<CR>
	nnoremap <silent><LocalLeader>j :<C-u>Denite jump change file/point<CR>
	nnoremap <silent><LocalLeader>u :<C-u>Denite junkfile:new junkfile<CR>
	nnoremap <silent><LocalLeader>o :<C-u>Denite outline<CR>
	nnoremap <silent><LocalLeader>s :<C-u>Denite session -buffer-name=list<CR>
	nnoremap <silent><expr> <LocalLeader>t &filetype == 'help' ? "g\<C-]>" :
		\ ":\<C-u>DeniteCursorWord -buffer-name=tag
		\  tag:include\<CR>"
	nnoremap <silent><expr> <LocalLeader>p  &filetype == 'help' ?
		\ ":\<C-u>pop\<CR>" : ":\<C-u>Denite -mode=normal jump\<CR>"
	nnoremap <silent><LocalLeader>h :<C-u>Denite help<CR>
	nnoremap <silent><LocalLeader>m :<C-u>Denite mpc -buffer-name=mpc<CR>
	nnoremap <silent><LocalLeader>/ :<C-u>Denite line<CR>
	nnoremap <silent><LocalLeader>* :<C-u>DeniteCursorWord line<CR>
	nnoremap <silent><LocalLeader>z :<C-u>Denite z<CR>
	nnoremap <silent><LocalLeader>; :<C-u>Denite command command_history<CR>

	" chemzqm/denite-git
	nnoremap <silent> <Leader>gl :<C-u>Denite gitlog:all<CR>
	nnoremap <silent> <Leader>gs :<C-u>Denite gitstatus<CR>
	nnoremap <silent> <Leader>gc :<C-u>Denite gitbranch<CR>

	" Open Denite with word under cursor or selection
	nnoremap <silent> <Leader>gf :DeniteCursorWord file/rec<CR>
	nnoremap <silent> <Leader>gg :DeniteCursorWord grep<CR>
	vnoremap <silent> <Leader>gg
		\ :<C-u>call <SID>get_selection('/')<CR>
		\ :execute 'Denite grep:::'.@/<CR><CR>

	function! s:get_selection(cmdtype)
		let temp = @s
		normal! gv"sy
		let @/ = substitute(escape(@s, '\'.a:cmdtype), '\n', '\\n', 'g')
		let @s = temp
	endfunction
" }}} Denite Options
" {{{ deoplete
	let g:deoplete#enable_at_startup = 1
" }}} deoplete
" {{{ neosnippet
	" Plugin key-mappings.
	" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
	imap <C-k>     <Plug>(neosnippet_expand_or_jump)
	smap <C-k>     <Plug>(neosnippet_expand_or_jump)
	xmap <C-k>     <Plug>(neosnippet_expand_target)

	" SuperTab like snippets behavior.
	" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
	"imap <expr><TAB>
	" \ pumvisible() ? "\<C-n>" :
	" \ neosnippet#expandable_or_jumpable() ?
	" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

	" For conceal markers.
	if has('conceal')
		set conceallevel=2 concealcursor=niv
	endif
		let g:deoplete#enable_at_startup = 1
" }}} neosnippet
"  NERDTree {{{
	autocmd StdinReadPre * let s:std_in=1
	autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
	let g:NERDTreeDirArrowExpandable = '▸'
	let g:NERDTreeDirArrowCollapsible = '▾'
	let g:NERDTreeWinPos = 'right'
	map <C-n> :NERDTreeToggle<CR>
	let g:NERDTreeMapOpenSplit = 'sv'
	let g:NERDTreeMapOpenVSplit = 'sg'
	let g:NERDTreeMapOpenInTab = 'st'
	let g:NERDTreeMapOpenInTabSilent = 'sT'
	let g:NERDTreeMapUpdirKeepOpen = '<BS>'
	let g:NERDTreeMapOpenRecursively = 't'
	let g:NERDTreeMapCloseChildren = 'T'
	let g:NERDTreeMapToggleHidden = '.'
	let g:NERDTreeQuitOnOpen = 1
" NERDTree }}}
" {{{ nvim-r
	let R_in_buffer = 0
	let R_term="alacritty"
	let R_assign = 2
" }}} nvim-r
"  python-mode {{{
	let g:pymode = 1
	let g:pymode_python = 'python3'
" NERDTree }}}
"  SuperTab {{{
	let g:SuperTabMappingForward = '<s-tab>' " (default value: '<tab>')
	let g:SuperTabMappingBackward = '<tab>' " (default value: '<s-tab>')
" SuperTab }}}
 "  tagbar {{{
	 let g:tagbar_left = 1
 " tagbar }}}
" {{{ vim-airline
	let g:airline#extensions#tabline#enabled = 1
	set laststatus=2
	let g:airline#extensions#whitespace#checks = ['trailing']
	let g:airline#extensions#whitespace#mixed_indent_algo = 1
	let g:airline_theme='onedark'
	let g:airline_powerline_fonts = 1
" }}} airline
" {{{ vim-indent-guides
	let g:indent_guides_guide_size = 1
	let g:indent_guides_color_change_percent = 3
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_auto_colors = 0
	autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black   ctermbg=241
	autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=black ctermbg=238
	set ts=2 sw=2 et
" }}} vim-indent-guides
" vim-cmake {{{
	let g:cmake_cxx_compiler='g++'
" vim-cmake }}}
" {{{ vim-easygit
	let g:easygit_enable_command = 1
	nnoremap <silent> <leader>gd :Gdiff<CR>
	nnoremap <silent> <leader>gD :Gdiffoff<CR>
	nnoremap <silent> <leader>gc :Gcommit<CR>
	nnoremap <silent> <leader>gb :Gblame<CR>
	nnoremap <silent> <leader>gB :Gbrowse<CR>
	nnoremap <silent> <leader>gS :Gstatus<CR>
	nnoremap <silent> <leader>gp :Gpush<CR>
" }}} vim-easygit
" {{{ vim-markdown-preview

let vim_markdown_preview_github=1
let vim_markdown_preview_browser='chromium'

" }}} vim-markdown-preview
" {{{ vim-project
	let g:project_use_nerdtree = 1
	let g:project_enable_welcome = 0
	set rtp+=~/.vim/bundle/vim-project/
	call project#rc("~/Code")
	Project  'scratch'
	Project  '~/.config/nvim/' , 'vimrc'
	Project  '~/.xmonad/' , 'xmonad'
	Project  '~/Dropbox/js_dissertation_research/' , 'dissertation'
	Project  '~/work/gleason/gleason-research' , 'gleason'
	Project  '~/school/spring_2019/csci_548/ruu_project/' , 'ruu_project'
	Project  '~/school/spring_2019/csci_548/' , 'csci_548'
	Project  '~/school/spring_2019/comp_geom' , 'comp_geom'
	Project  '~/school/spring_2019/comptag/' , 'comptag'
" }}} vim-project
" {{{ vim-slime
	let g:slime_target = "tmux"
	let g:slime_python_ipython = 1
" }}} vim-slime
" {{{ vim-window
	" Unimpaired mapping
	nnoremap ]r :<C-U>call window#rotate(-1 * v:count1)<cr>
	nnoremap [r :<C-U>call window#rotate(1 * v:count1)<cr>

	" Improved window rotate to work with all layouts
	nmap <C-w>r ]r
	nmap <C-w><C-r> ]r

	" Improve window exchange to work with all layouts
	nnoremap <C-w>x :<C-U>call window#exchange(v:count)<cr>
	nnoremap <C-w><c-x> :<C-U>call window#exchange(v:count)<cr>

	" [g]lue windows together.
	"    l = glue to right side
	"    h = glue to left side
	"    j = glue to bottom
	"    k = glue to top
	"
	" `normal! 100zh` scrolls window contents into view since it gets messy when
	" narrower window tries refocuses its cursor.
	nnoremap <C-w>gl :<C-U>call window#join('rightbelow vsplit', v:count) <BAR>normal! 100zh<CR>
	nnoremap <C-w>gh :<C-U>call window#join('leftabove vsplit', v:count)  <BAR>normal! 100zh<CR>
	nnoremap <C-w>gj :<C-U>call window#join('belowright split', v:count)  <BAR>normal! 100zh<CR>
	nnoremap <C-w>gk :<C-U>call window#join('aboveleft split', v:count)   <BAR>normal! 100zh<CR>

	" Force a primary window layout.
	" The capital HJKL forces the primary window to a specific direction.
	command! -nargs=* LayoutH call window#layout('ball', 'H', <args>)
	command! -nargs=* LayoutJ call window#layout('vertical ball', 'J', <args>)
	command! -nargs=* LayoutK call window#layout('vertical ball', 'K', <args>)
	command! -nargs=* LayoutL call window#layout('ball', 'L', <args>)

	" Map the layout commands to something if that's your style.
	nnoremap <C-w>gH :<C-U>LayoutH v:count<CR>
	nnoremap <C-w>gJ :<C-U>LayoutJ v:count<CR>
	nnoremap <C-w>gK :<C-U>LayoutK v:count<CR>
	nnoremap <C-w>gL :<C-U>LayoutL v:count<CR>

	" Improve window only, to split to new tab instead
	nnoremap <C-w>o :call window#only()<cr>
	nnoremap <C-w><c-o> :call window#only()<cr>
" }}} vim-window
" {{{ which-key
	let g:which_key_map = {}

	let g:which_key_map['a'] = {
			\ 'name' : '+applications' ,
			\ 's' : ['Deol'    , 'Deol']            ,
			\ 'c' : ['Calendar'    , 'Calendar']            ,
			\ }
	let g:which_key_map.b = {
				\ 'name' : '+buffer' ,
				\ '?' : ['Buffers'   , 'fzf-buffer']      ,
				\ '1' : ['b1'        , 'buffer 1']        ,
				\ '2' : ['b2'        , 'buffer 2']        ,
				\ 'd' : ['bd'        , 'delete-buffer']   ,
				\ 'f' : ['bfirst'    , 'first-buffer']    ,
				\ 'h' : ['Startify'  , 'home-buffer']     ,
				\ 'l' : ['blast'     , 'last-buffer']     ,
				\ 'n' : ['bnext'     , 'next-buffer']     ,
				\ 'b' : ['bprevious' , 'back-a-buffer'] ,
				\ 's' : ['w' , 'Write Buffer'] ,
				\ 'S' : ['w!' , 'Force Write Buffer'] ,
				\ 'p' : ['Welcome'  , 'Project-buffer']     ,
				\ }
	let g:which_key_map['c'] = {
			\ 'name' : '+compile' ,
			\ 'c' : ['CMake'    , 'Run CMake']            ,
			\ 'm' : ['make'    , 'Run Make']            ,
			\ }
	let g:which_key_map.e = {
				\ 'name' : '+easyjump' ,
				\ 'e' : ['<Plug>(easymotion-overwin-f2)'        , 'easymotion']        ,
				\ }
	let g:which_key_map.f = {
				\ 'name' : '+files' ,
				\ 'f' : ['NERDTree'   , 'File Browser']      ,
				\ }
	let g:which_key_map.g = {
				\ 'name' : '+git' ,
				\ 'a' : ['Gadd'   , 'Git Add']      ,
				\ 'd' : ['Gdiff'   , 'Git Diff']      ,
				\ 'p' : ['Gpush'   , 'Git Push']      ,
				\ 's' : ['Gstatus'   , 'Git Status']      ,
				\ }
	let g:which_key_map.l = {
			\ 'name' : '+lsp'                                            ,
			\ 'f' : ['LanguageClient#textDocument_formatting()'     , 'formatting']       ,
			\ 'h' : ['LanguageClient#textDocument_hover()'          , 'hover']            ,
			\ 'r' : ['LanguageClient#textDocument_references()'     , 'references']       ,
			\ 'R' : ['LanguageClient#textDocument_rename()'         , 'rename']           ,
			\ 's' : ['LanguageClient#textDocument_documentSymbol()' , 'document-symbol']  ,
			\ 'S' : ['LanguageClient#workspace_symbol()'            , 'workspace-symbol'] ,
			\ 'g' : {
				\ 'name': '+goto',
				\ 'd' : ['LanguageClient#textDocument_definition()'     , 'definition']       ,
				\ 't' : ['LanguageClient#textDocument_typeDefinition()' , 'type-definition']  ,
				\ 'i' : ['LanguageClient#textDocument_implementation()'  , 'implementation']  ,
				\ },
			\ }
	let g:which_key_map.t = {
			\ 'name' : '+tab'                                            ,
			\ 'c' : ['tabnew'     , 'New Tab']       ,
			\ 'l' : ['tabs'     , 'List Tabs']       ,
			\ 'n' : ['tabnext'     , 'Next Tab']       ,
			\ 'p' : ['tabprevious'     , 'Previous Tab']       ,
			\ 'd' : ['tabclose'     , 'Close Tab']       ,
			\ }
	let g:which_key_map.T = {
			\ 'name' : '+tags'                                            ,
			\ 'T' : ['TagbarToggle'     , 'Toggle Tagbar']       ,
			\ }
	let g:which_key_map['w'] = {
			\ 'name' : '+windows' ,
			\ 'w' : ['<C-W>w'     , 'other-window']          ,
			\ 'd' : ['<C-W>c'     , 'delete-window']         ,
			\ '-' : ['<C-W>s'     , 'split-window-below']    ,
			\ '|' : ['<C-W>v'     , 'split-window-right']    ,
			\ '2' : ['<C-W>v'     , 'layout-double-columns'] ,
			\ 'h' : ['<C-W>h'     , 'window-left']           ,
			\ 'j' : ['<C-W>j'     , 'window-below']          ,
			\ 'l' : ['<C-W>l'     , 'window-right']          ,
			\ 'k' : ['<C-W>k'     , 'window-up']             ,
			\ 'H' : ['<C-W>5<'    , 'expand-window-left']    ,
			\ 'J' : ['resize +5'  , 'expand-window-below']   ,
			\ 'L' : ['<C-W>5>'    , 'expand-window-right']   ,
			\ 'K' : ['resize -5'  , 'expand-window-up']      ,
			\ '=' : ['<C-W>='     , 'balance-window']        ,
			\ 's' : ['<C-W>s'     , 'split-window-below']    ,
			\ 'v' : ['<C-W>v'     , 'split-window-below']    ,
			\ '?' : ['Windows'    , 'fzf-window']            ,
			\ }
	let g:which_key_map.z = {
			\ 'name' : '+fold'                                            ,
			\ 'c' : ['tabnew'     , 'New Fold']       ,
			\ }

call which_key#register(',', "g:which_key_map")
 " call which_key#register('l', "g:which_key_map")

nnoremap <silent> , :WhichKey ','<CR>
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :WhichKey ';'<CR>
"	vnoremap <silent> <localleader> :WhichKey ';'<CR>
" }}} deoplete
" {{{ languageclient
    let g:LanguageClient_serverCommands = {
        \ 'rust': ['rustup', 'run', 'stable', 'rls'],
        \ }
" }}} languageclient




endif
" }}} Post-plugin settings
" {{{ Olde

" " TODO: figure out first usecase... just for nvim?
" let $NVIM_PYTHON_LOG_FILE = '/tmp/nvim_log'
" let $NVIM_PYTHON_LOG_LEVEL = 'DEBUG'
"
" " Set main configuration directory, and where cache is stored.
" let $VIMPATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h') " TODO: understand this line
" let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim') " TODO: Find out what I cache here...

" " Search and use environments specifically made for Neovim.... Don't use interactive python extensively... Environment could be machine dependent...
" " TODO: Figure out why these are set
" if isdirectory($VARPATH.'/venv/neovim2')
" 	let g:python_host_prog = $VARPATH.'/venv/neovim2/bin/python'
" endif
" if isdirectory($VARPATH.'/venv/neovim3')
" 	let g:python3_host_prog = $VARPATH.'/venv/neovim3/bin/python'
" endif
"
" if &compatible
"   set nocompatible
" endif
" " Add the dein installation directory into runtimepath
" set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim
"
" let g:dein#install_max_processes = 16
" let g:dein#install_progress_type = 'echo'
" let g:dein#enable_notification = 0
" let g:dein#install_log_filename = $VARPATH.'/dein.log'
"
" " if dein#load_state('~/.cache/dein')
" "   call dein#begin('~/.cache/dein')
" "
" "   call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')
" "   call dein#add('Shougo/deoplete.nvim')
" "   call dein#add('jordans1882/vim-slime')
" "   if !has('nvim')
" "     call dein#add('roxma/nvim-yarp')
" "     call dein#add('roxma/vim-hug-neovim-rpc')
" "   endif
" "
" "   call dein#end()
" "   call dein#save_state()
" " endif
"
" filetype plugin indent on
" syntax enable
"
"
" "
" " " Check if ruby exists
" function! s:dein_check_ruby() abort
" 	call system("ruby -e 'require \"json\"; require \"yaml\"'")
" 	return (v:shell_error == 0) ? 1 : 0
" endfunction
" "
" " " Check if yaml2json exists
" function! s:dein_check_yaml2json()
" 	try
" 		let result = system('yaml2json', "---\ntest: 1")
" 		if v:shell_error != 0
" 			return 0
" 		endif
" 		let result = json_decode(result)
" 		return result.test
" 	catch
" 	endtry
" 	return 0
" endfunction
" "
" " " Function to load plugins from yaml file
" function! s:dein_load_yaml(filename) abort
" 	if executable('yaml2json') && exists('*json_decode') &&
" 				\ s:dein_check_yaml2json()
" 		" Decode YAML using the CLI tool yaml2json
" 		" See: https://github.com/koraa/large-yaml2json-json2yaml
" 		let g:denite_plugins = json_decode(
" 					\ system('yaml2json', readfile(a:filename)))
" 	elseif executable('ruby') && exists('*json_decode') && s:dein_check_ruby()
" 		let g:denite_plugins = json_decode(
" 					\ system("ruby -e 'require \"json\"; require \"yaml\"; ".
" 									\ "print JSON.generate YAML.load \$stdin.read'",
" 									\ readfile(a:filename)))
" 	else
" 		" Fallback to use python3 and PyYAML
" 	python3 << endpython
" import vim, yaml
" with open(vim.eval('a:filename'), 'r') as f:
" 	vim.vars['denite_plugins'] = yaml.load(f.read())
" endpython
" 	endif
"
" 	for plugin in g:denite_plugins
" 		call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
" 	endfor
" 	unlet g:denite_plugins
" endfunction
" "
" " " Function to source a file (only within this script?)
" " " TODO: look at logic in this function
" function! s:source_file(path, ...) abort
" 	let use_global = get(a:000, 0, ! has('vim_starting'))
" 	let abspath = resolve(expand($VIMPATH.'/config/'.a:path))
" 	if ! use_global
" 		execute 'source' fnameescape(abspath)
" 		return
" 	endif
"
" 	let content = map(readfile(abspath),
" 		\ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
" 	let tempfile = tempname()
" 	try
" 		call writefile(content, tempfile)
" 		execute printf('source %s', fnameescape(tempfile))
" 	finally
" 		if filereadable(tempfile)
" 			call delete(tempfile)
" 		endif
" 	endtry
" endfunction
" "
" " " Set augroup
" " " TODO: Comment why we're setting this
" augroup MyAutoCmd
" 	autocmd!
" 	autocmd CursorHold *? syntax sync minlines=300
" augroup END
" "
" " " Initialize base requirements
" " (i.e. load init.vim or terminal.vim depending...)
" if has('vim_starting')
" 	call s:source_file('init.vim')
" 	if ! has('nvim') && ! has('gui_running') && ! has('win32') && ! has('win64')
" 		" Linux terminal settings
" 		call s:source_file('terminal.vim')
" 	endif
" endif
" "
" " Initialize dein.vim (package manager)
" let s:path = expand('$VARPATH/dein')
" let s:plugins_path = expand('$VIMPATH/config/plugins.yaml')
" let s:user_plugins_path = expand('$VIMPATH/config/local.plugins.yaml')
" if dein#load_state(s:path)
" 	call dein#begin(s:path, [expand('<sfile>'), s:plugins_path])
" 	try
" 		call s:dein_load_yaml(s:plugins_path)
" 		if filereadable(s:user_plugins_path)
" 			call s:dein_load_yaml(s:user_plugins_path)
" 		endif
" 	catch /.*/
" 		echoerr v:exception
" 		echomsg 'Error loading config/plugins.yaml...'
" 		echomsg 'Caught: ' v:exception
" 		echoerr 'Please run: pip3 install --user PyYAML'
" 	endtry
"
" 	if isdirectory(expand('$VIMPATH/dev'))
" 		call dein#local(expand('$VIMPATH/dev'), {'frozen': 1, 'merged': 0})
" 	endif
" 	call dein#end()
" 	call dein#save_state()
" 	if dein#check_install()
" 		if ! has('nvim')
" 			set nomore
" 		endif
" 		call dein#install()
" 	endif
" endif
"
" " Source (all) plugin config
" " TODO: find out why put all in this file
" call s:source_file('plugins/all.vim')
" call s:source_file('plugins/denite.vim')
" "
" " " TODO: comment this with reason
" filetype plugin indent on
" syntax enable
"
" "
" " " TODO: find out why the if statement
" " " if ! has('vim_starting')
" " 	call dein#call_hook('source')
" " 	call dein#call_hook('post_source')
" " " endif
" "
" " " Load configuration modules
" call s:source_file('general.vim')
" call s:source_file('filetype.vim')
" call s:source_file('mappings.vim')
" call s:source_file('theme.vim')
" "
" " " Load user custom local settings
" " if filereadable(expand('$VIMPATH/config/local.vim'))
" " 	call s:source_file('local.vim')
" " endif
" " set secure
" "
" "

" }}} Olde

" vim: set foldmethod=marker ts=2 :
